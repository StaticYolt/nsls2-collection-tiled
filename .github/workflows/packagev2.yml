name: package_env v2

on:
  workflow_call:
    inputs:
      version: # the variable you can use in place of a matrix
        required: true
        type: string

jobs:
  generate_conda_packd_envs:
    name: "conda-pack'd env with Python -${{ inputs.version }}- and Repo -${{ matrix.repos.beamline_acronym}}-"
    strategy:
      fail-fast: false
      matrix:
        repos:
          - org: "NSLS-II-CSX"
            repo: "profile_collection"
            branch: "master"
            profile_branch: "master"
            beamline_acronym: "csx"
          - org: "NSLS-II-SRX"
            repo: "profile_collection"
            branch: "master"
            profile_branch: "master"
            beamline_acronym: "srx"
    runs-on: ubuntu-latest
    outputs:
      test_conda_packed_name: ${{ env.TEST_ENV_NAME }}
    env:
      TZ: America/New_York

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Python for YAML CLI tools
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install YAML CLI tools
        run: |
          python3 -m pip install shyaml

      - name: Set env vars
        run: |
          set -euo pipefail

          export REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}  # just the repo, as opposed to org/repo
          echo "REPOSITORY_NAME=${REPOSITORY_NAME}" >> $GITHUB_ENV

          export DATETIME_STRING=$(date +%Y%m%d%H%M%S)
          echo "DATETIME_STRING=${DATETIME_STRING}" >> $GITHUB_ENV

          export PYTHONVER=$(echo ${{ inputs.version }} | sed 's/\.//g')
          echo "PYTHONVER=${PYTHONVER}" >> $GITHUB_ENV

          export CONDA_PACK_TEMPLATE_DIR=${HOME}/conda-pack-template
          echo "CONDA_PACK_TEMPLATE_DIR=${CONDA_PACK_TEMPLATE_DIR}" >> $GITHUB_ENV

          env_name=$(cat configs/config-py${PYTHONVER}.yml | shyaml get-value env_name)
          export CONDA_PACK_ENV_NAME=${env_name}
          echo "CONDA_PACK_ENV_NAME=${CONDA_PACK_ENV_NAME}" >> $GITHUB_ENV
  
          env | sort -u
          echo "$GITHUB_ENV"

      # - uses: conda-incubator/setup-miniconda@v3
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #     # mamba-version: "*"
      #     channels: conda-forge
      #     channel-priority: strict
      #     activate-environment: packaging
      #     environment-file: envs/env-py${{ env.PYTHONVER }}.yml

      - name: Setup umamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: envs/env-py${{ env.PYTHONVER }}.yml
          log-level: info

      - name: Check env
        run: |
          # For reference: https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html.
          conda info
          conda env list
          conda list
          pip list
          conda config --show-sources
          conda config --show
          printenv | sort
          echo $MAMBA_ROOT_PREFIX
          ls
        #original line 1: set -vxeuo pipefail
      - name: Cloning Remote Repositories
        run: |
          mkdir "${{matrix.repos.repo}}"
          git clone -b ${{matrix.repos.branch}} "https://github.com/${{matrix.repos.org}}/${{matrix.repos.repo}}" "${{matrix.repos.repo}}"
      - name: Configuring defaults (pyOlog, databroker, and kafka)
        run: |
          echo "pyOlog config:"
          wget https://raw.githubusercontent.com/NSLS-II/profile-collection-ci/master/configs/pyOlog.conf -O $HOME/.pyOlog.conf
          cat $HOME/.pyOlog.conf

          echo "Classic databroker v0/v1 config:"
          databroker_conf_dir="$HOME/.config/databroker"
          beamline_acronym="${BEAMLINE_ACRONYM,,}"
          databroker_bl_conf="${beamline_acronym}.yml"
          mkdir -v -p ${databroker_conf_dir}
          wget https://raw.githubusercontent.com/NSLS-II/profile-collection-ci/master/configs/databroker.yml -O ${databroker_conf_dir}/_legacy_config.yml
          cp -v ${databroker_conf_dir}/_legacy_config.yml ${databroker_conf_dir}/${databroker_bl_conf}
          cat ${databroker_conf_dir}/_legacy_config.yml
          cat ${databroker_conf_dir}/${databroker_bl_conf}

          echo "Tiled profile config:"
          tiled_profiles_dir="$HOME/.config/tiled/profiles/"
          mkdir -v -p "${tiled_profiles_dir}"
          sed 's/^  //' << EOF > "${tiled_profiles_dir}/profiles.yml"
          ${beamline_acronym:-local}:
            direct:
              authentication:
                allow_anonymous_access: true
              trees:
              - tree: databroker.mongo_normalized:Tree.from_uri
                path: /
                args:
                  uri: mongodb://localhost:27017/metadatastore-local
                  asset_registry_uri: mongodb://localhost:27017/asset-registry-local
          EOF
            cat ${tiled_profiles_dir}/profiles.yml

            echo "Kafka config:"
            sed 's/^  //' << EOF > kafka.yml
            ---
              abort_run_on_kafka_exception: false
              bootstrap_servers:
                - localhost:9092
              runengine_producer_config:
                security.protocol: PLAINTEXT
          EOF

            echo "SUDO: Placing kafka config in /etc/bluesky"
            sudo mkdir -v -p /etc/bluesky/
            sudo mv -v kafka.yml /etc/bluesky/kafka.yml
            cat /etc/bluesky/kafka.yml
      - name: Setup Ipython Test Profile
        env:
          PROFILE_REPO: "https://github.com/${{matrix.repos.org}}/${{matrix.repos.repo}}.git"
          PROFILE_BRANCH: "${{matrix.repos.profile_branch}}"
        run: |
          echo "Preparing test profile"
          rm -rfv profile_collection
            git clone "$PROFILE_REPO" profile_collection
            (
              cd profile_collection
              git checkout "$PROFILE_BRANCH"
              rm -rfv ~/.ipython/profile_${{env.PROFILE_NAME}}/
              mkdir -pv ~/.ipython/profile_${{env.PROFILE_NAME}}/
              cp -rv startup ~/.ipython/profile_${{env.PROFILE_NAME}}/
            )
      - name: Set Up Ipython
        run: pip install ipython
      - name: Creating Ipython Profile
        run: ipython profile create ${{env.PROFILE_NAME}}
      - name: Configuring Redis
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: latest
      - name: Configuring Mongo
        uses: supercharge/mongodb-github-action@1.11.0
        with:
          mongodb-version: '4.4'
      - name: Performing Beamline Actions
        env:
          BEAMLINE_ACRONYM: ${{matrix.repos.beamline_acronym}}
        run: |
          echo "Performing beamline-specific tasks..."
          cfg_dir="/nsls2/data/$BEAMLINE_ACRONYM/shared/config"
          if [[ ! -d "$cfg_dir" ]]; then
            sudo mkdir -v -p "$cfg_dir" ||
            (
              echo "Error: Couldn't create dir: $cfg_dir"
              exit 1
            )
          fi
      - name: Setting up Blackhole IOC
        run: |
          python3 -m pip install -U caproto
          echo | python3 -m caproto.ioc_examples.pathological.spoof_beamline &
          trap 'kill -SIGINT %1; echo exiting...' EXIT
          sudo ln -svf caproto-repeater "/bin/caRepeater"
      - name: Checking Blackhole IOC PV's
        run: |
          sudo pip install supervisor
          chmod +x supervisor/start_supervisor.sh
          supervisor/start_supervisor.sh status
      - name: STARTUP TEST
        run: |
          eval "$(conda shell.bash hook)"
          conda activate "$MAMBA_ROOT_PREFIX/envs/${{ env.CONDA_PACK_ENV_NAME }}"
          for tiled_profile_name in nsls2 ${{matrix.repos.beamline_acronym}}; do
            tiled profile create --name $tiled_profile_name https://127.0.0.1:8000
          done
          ipython --profile ${{env.PROFILE_NAME}}
  generate-report:
    needs: generate_conda_packd_envs
    if: |
      always() &&
      (needs.generate_conda_packd_envs.result == 'success' || needs.generate_conda_packd_envs.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: report generation
        run: |
          chmod u+x workflow_report_generator.py
          echo ${{ inputs.version }}
          echo ${{ github.run_id }}
          python workflow_report_generator.py -p "${{ inputs.version }}" -a "${{ github.run_id }}" -n "3"

      #      - name: Export files
#        run: |
#          set -vxeo pipefail
#
#          export ARTIFACTS_DIR="$HOME/artifacts"
#          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
#          if [ ! -d "${ARTIFACTS_DIR}" ]; then
#              mkdir -v -p "${ARTIFACTS_DIR}"
#          fi
#
#          # conda env export -n ${CONDA_PACK_ENV_NAME} -f ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml -c conda-forge --override-channels
#          conda env export -f ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml
#          # Per https://conda.github.io/conda-pack/cli.html:
#          conda-pack -o ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz --ignore-missing-files --ignore-editable-packages
#          openssl sha256 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz > ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-sha256sum.txt
#          openssl md5 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz > ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-md5sum.txt
#          chmod -v 664 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}[.-]*
#
#      - name: Contents of the env .yml file
#        run: |
#          cat ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml
#
#      - name: Checksum files
#        run: |
#          cat ${ARTIFACTS_DIR}/*sum.txt
#
#      # https://github.com/actions/upload-artifact
#      - name: Upload artifacts for the env .yml file
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.CONDA_PACK_ENV_NAME }}.yml
#          path: ${{ env.ARTIFACTS_DIR }}/${{ env.CONDA_PACK_ENV_NAME }}.yml
#          retention-days: 60
#
#      - name: Upload artifacts for branch
#        if: |
#          github.ref != 'refs/heads/main'
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-${{ env.CONDA_PACK_ENV_NAME }}
#          path: ${{ env.ARTIFACTS_DIR }}
#          retention-days: 14
#
#      - name: passing output
#        run: echo "TEST_ENV_NAME=${{ env.CONDA_PACK_ENV_NAME }}" >> $GITHUB_ENV



        #-${{ env.DATETIME_STRING }}
#      - name: Upload artifacts for release
#        if: |
#          github.ref == 'refs/heads/main'
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.CONDA_PACK_ENV_NAME }}
#          path: ${{ env.ARTIFACTS_DIR }}
#          retention-days: 60